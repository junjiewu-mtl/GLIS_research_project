dt_csv <- dt_csv[dt_csv[,'na_count'] < 10,]
# write.csv(dt_csv,'~/Desktop/GLIS\ Research/num_china_data_fixed.csv')
# write_sav(dt_csv, '~/Desktop/GLIS\ Research/num_china_data_fixed.sav')
# bind_china_dt <- rbind(dt_spss,dt_csv)
dt_csv <- data.table(dt_csv %>% mutate_if(is.character,as.integer))
dt_csv[, total_score := rowSums(.SD), .SDcols = 57:62]
dt_csv_mean <- sapply(dt_csv[,37:56], mean, na.rm=TRUE)
View(sort(dt_csv_mean, decreasing = T))
# write_sav(bind_china_dt, '~/Desktop/GLIS\ Research/bind_china_data_fixed.sav')
write.csv(dt_csv, '~/Desktop/GLIS\ Research/GLIS_research_project/data/cleaned_01_16_cn.csv')
rm(list = ls())
pacman::p_load(data.table, bit64, openxlsx, haven, dplyr, corrplot, zoo,
matrixStats, plotly, DAAG,PerformanceAnalytics,
BiocManager)
setwd('~/Desktop/GLIS Research/GLIS_research_project/data')
###################### missing value imputation #####################
dt <- fread('cleaned_01_16_cn.csv')
#knn
if(exists(".Random.seed")) rm(.Random.seed)
dt_imputed <- impute.knn(as.matrix(dt[,c(2:30, 38:69, 71)]))
dt_q30 <- dt[,c(1,31:37)]
dt_imputed <- data.table(dt_imputed$data)
dt_imputed$V1 <- seq.int(nrow(dt_imputed))
dt_merge <- merge(dt_imputed, dt_q30, by = 'V1')
dt_merged <- dt_merge[,c(1:30,64:70,31:63)]
write_sav(dt_merged, 'knn_imputed_cn_data.sav')
write.csv(dt_merged, 'knn_imputed_cn_data.csv')
# ####################################################################
dt <- fread('knn_imputed_cn_data.csv')
# sustainable value
dt[, `:=`(sus_val = rowSums(.SD, na.rm=T)), .SDcols=c(42,51,52,53,50,54,55,56,57)]
# aesthetic values
dt[, aes_val := rowSums(.SD, na.rm=T), .SDcols=c(43:44)]
#Green Consciousness
dt[, green_con := rowSums(.SD, na.rm=T), .SDcols=c(2:6)]
#Consumer Innovativeness
dt[, con_inno := rowSums(.SD, na.rm=T), .SDcols=c(51:57, 59:63)]
################### scatter plot function: ggplotRegression ###################
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
dt_mean <- sapply(dt[,38:57], mean, na.rm=TRUE)
sort(dt_mean)
dt_2 <- dt
dt_2[, sus_aes := sus_val+aes_val]
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_2))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_2)), size = smp_size)
train <- dt_2[train_ind, ]
test <- dt_2[-train_ind, ]
linear_2 <- lm(con_inno ~ sus_aes, data = train)
summary(linear_2)
p_dt <- predict(linear_2, test)
actuals_preds <- data.frame(cbind(actuals=test$con_inno, predicteds=p_dt))
correlation_accuracy <- cor(actuals_preds)
head(actuals_preds)
ggplotRegression(linear_2)
correlation_accuracy
dt_3 <- dt
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_3))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_3)), size = smp_size)
train <- dt_3[train_ind, ]
test <- dt_3[-train_ind, ]
liner_3 <- lm(green_con ~ sus_val, data = dt_3)
summary(liner_3)
ggplotly(ggplotRegression(liner_3))
plot(green_con ~ sus_val, data = train)
abline(liner_3)
p_dt <- predict(liner_3, test)
actuals_preds <- data.frame(cbind(actuals=test$green_con, predicteds=p_dt))
correlation_accuracy <- cor(actuals_preds)
head(actuals_preds)
ggplotly(ggplotRegression(liner_3))
summary(dt$ggreen_con)
dt_3$ggreen_con
summary(dt$green_con)
# ####################################################################
dt <- fread('knn_imputed_cn_data.csv')
dt_csv_mean <- sapply(dt[,37:56], mean, na.rm=TRUE)
View(sort(dt_csv_mean, decreasing = T))
# ####################################################################
dt <- fread('knn_imputed_cn_data.csv')
# write_sav(bind_china_dt, '~/Desktop/GLIS\ Research/bind_china_data_fixed.sav')
write.csv(dt_csv, '~/Desktop/GLIS\ Research/GLIS_research_project/data/cleaned_01_16_cn.csv', row.names = F)
# dt_imputed <- impute.knn(as.matrix(dt[,c(2:30, 38:69, 71)]))
# dt_q30 <- dt[,c(1,31:37)]
#
# dt_imputed <- data.table(dt_imputed$data)
# dt_imputed$V1 <- seq.int(nrow(dt_imputed))
#
# dt_merge <- merge(dt_imputed, dt_q30, by = 'V1')
#
# dt_merged <- dt_merge[,c(1:30,64:70,31:63)]
#
write.csv(dt_merged, 'knn_imputed_cn_data.csv', row.names = F)
# ####################################################################
dt <- fread('knn_imputed_cn_data.csv')[,-1]
dt_csv_mean <- sapply(dt[,37:56], mean, na.rm=TRUE)
View(sort(dt_csv_mean, decreasing = T))
# sustainable value
dt[, `:=`(sus_val = rowSums(.SD, na.rm=T)), .SDcols=c(42,51,52,53,50,54,55,56,57)]
# aesthetic values
dt[, aes_val := rowSums(.SD, na.rm=T), .SDcols=c(43:44)]
#Green Consciousness
dt[, green_con := rowSums(.SD, na.rm=T), .SDcols=c(2:6)]
#Consumer Innovativeness
dt[, con_inno := rowSums(.SD, na.rm=T), .SDcols=c(51:57, 59:63)]
summary(dt$green_con)
dt_3 <- dt
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_3))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_3)), size = smp_size)
train <- dt_3[train_ind, ]
test <- dt_3[-train_ind, ]
liner_3 <- lm(green_con ~ sus_val, data = dt_3)
summary(liner_3)
ggplotly(ggplotRegression(liner_3))
p_dt <- predict(liner_3, test)
actuals_preds <- data.frame(cbind(actuals=test$green_con, predicteds=p_dt))
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
dt_2 <- dt
dt_2[, sus_aes := sus_val+aes_val]
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_2))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_2)), size = smp_size)
train <- dt_2[train_ind, ]
test <- dt_2[-train_ind, ]
linear_2 <- lm(con_inno ~ sus_aes, data = train)
summary(linear_2)
p_dt <- predict(linear_2, test)
actuals_preds <- data.frame(cbind(actuals=test$con_inno, predicteds=p_dt))
correlation_accuracy <- cor(actuals_preds)
head(actuals_preds)
ggplotRegression(linear_2)
correlation_accuracy
pacman::p_load(data.table, bit64, openxlsx, haven, dplyr, corrplot, zoo,
matrixStats, plotly, DAAG,PerformanceAnalytics,
BiocManager, ISLR)
data(package="ISLR")
carseats <- Carseats
pacman::p_load(data.table, bit64, openxlsx, haven, dplyr, corrplot, zoo,
matrixStats, plotly, DAAG,PerformanceAnalytics,
BiocManager, ISLR, tree)
carseats
View(head(carseats))
hist(carseats$Sales)
High = ifelse(carseats$Sales<=8, "No", "Yes")
carseats = data.frame(carseats, High)
tree.carseats = tree(High~.-Sales, data=carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
View(dt_a)
colnames(dt)
dt_a <- dt[, c(65,37,39,40,42,43,65)]
View(dt_a)
dt[Q41.Sex < 3,]
dt_a <- dt[Q41.Sex < 3,]
dt_a$Q41.Sex
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt[Q41.Sex < 3,]
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dtdt_a[Q41.Sex < 3,]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
tree.dt_a = tree(Q41.Sex~, data=dt_a)
tree.dt_a = tree(Q41.Sex~ data=dt_a)
tree.dt_a = tree(Q41.Sex, data=dt_a)
colnames(dt_a)
tree.dt_a = tree(Q41.Sex~., data=carseats)
tree.dt_a = tree(Q41.Sex~., data=carseats)
tree.dt_a = tree('Q41.Sex'~., data=carseats)
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
summary(tree.dt_a)
tree.dt_a = tree(Q41.Sex~., data=dt_a)
View(dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
View(dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
View(dt_a)
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
View(dt_a)
colnames(dt_a)
dt_a$Gender <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Gender <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Gender <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
tree.dt_a = tree(Q41.Sex~ . -Q41.Sex, data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
tree.dt_a = tree(Gender . -Q41.Sex, data=dt_a)
tree.dt_a = tree(Gender~. -Q41.Sex, data=dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Gender <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
tree.dt_a = tree(Gender~. -Q41.Sex, data=dt_a)
dt_a <- dt_a[,-8]
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Gender <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,65)]
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
colnames(dt_a)
tree.dt_a = tree(Q41.Sex~Q31a.Fit+Q31c.Fibre.Material+Q31d.Quality.Workmanship, data=dt_a)
High
carseats
View(carseats)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- ifelse(dt_a$Q41.Sex<=1, "Male", "Female")
View(dt_1)
View(dt_a)
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
tree.dt_a = tree(Q41.Sex~Q31a.Fit+Q31c.Fibre.Material+Q31d.Quality.Workmanship, data=dt_a)
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
Q31a.Fit+Q31c.Fibre.Material+Q31d.Quality.Workmanship
tree.dt_a = tree(Q41.Sex~Q31a.Fit+Q31c.Fibre.Material+Q31d.Quality.Workmanship, data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
View(dt_a)
View(dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
dt_a <- data.table(dt_a %>% mutate_if(is.factor,as.numeric()))
dt_a <- data.table(dt_a %>% mutate_if(is.factor,as.numeric)
dt_a <- data.table(dt_a %>% mutate_if(is.factor,as.numeric))
View(dt_a)
dt_a <- data.table(dt_a %>% mutate_if(is.numeric,as.factor))
tree.dt_a = tree(Q41.Sex~Q31a.Fit+Q31c.Fibre.Material+Q31d.Quality.Workmanship, data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
View(dt_a)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
# dt_a <- data.table(dt_a %>% mutate_if(is.numeric,as.factor))
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
dt_a <- dt[, c(65,37,39,40,42,43,51,52,53,50,54,55,56,57)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
tree.dt_a = tree(Q41.Sex~., data=dt_a)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,51,52,53,50,54,55,56,57)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_a))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_a)), size = smp_size)
train <- dt_a[train_ind, ]
test <- dt_a[-train_ind, ]
tree.dt_a = tree(Q41.Sex~., data=train)
summary(tree.dt_a)
tree.pred = predict(tree.dt_a, dt_a[-train,], type="class")
dt_a
dt_a[-train,]
dt_a[train_ind, ]
tree.pred = predict(tree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train,], table(tree.pred, Gender))
with(dt_a[-train,], table(tree.pred, Male))
with(dt_a[-train,], table(tree.pred, Q41.Sex))
with(dt_a[-train_ind,], table(tree.pred, Q41.Sex))
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,51,52,53,50,54,55,56,57)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_a))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_a)), size = smp_size)
train <- dt_a[train_ind, ]
test <- dt_a[-train_ind, ]
# dt_a <- data.table(dt_a %>% mutate_if(is.numeric,as.factor))
tree.dt_a = tree(Q41.Sex~., data=train)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
tree.pred = predict(tree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train_ind,], table(tree.pred, Q41.Sex))
dt_1 <- dt
dt_a <- dt[, c(65,37,39,40,42,43,51,52,53,50,54,55,56,57)]
dt_a <- dt_a[Q41.Sex < 3,]
dt_a$Q41.Sex <- as.factor(ifelse(dt_a$Q41.Sex<=1, "Male", "Female"))
## 75% of the sample size
smp_size <- floor(0.75 * nrow(dt_a))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(dt_a)), size = smp_size)
train <- dt_a[train_ind, ]
test <- dt_a[-train_ind, ]
# dt_a <- data.table(dt_a %>% mutate_if(is.numeric,as.factor))
tree.dt_a = tree(Q41.Sex~., data=train)
summary(tree.dt_a)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
tree.pred = predict(tree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train_ind,], table(tree.pred, Q41.Sex))
pacman::p_load(data.table, bit64, openxlsx, haven, dplyr, corrplot, zoo,
matrixStats, plotly, DAAG,PerformanceAnalytics,
BiocManager, ISLR, tree, rpart)
pacman::p_load(data.table, bit64, openxlsx, haven, dplyr, corrplot, zoo,
matrixStats, plotly, DAAG,PerformanceAnalytics,
BiocManager, ISLR, tree, rpart,rpart.plot)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
View(train)
prp(tree.dt_a)
tree.pred = predict(rtree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train_ind,], table(rtree.dt_a, Q41.Sex))
tree.pred = predict(rtree.dt_a, dt_a[-train_ind, ], type="regression")
tree.pred = predict(rtree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train_ind,], table(rtree.dt_a, Q41.Sex))
text(tree.dt_a, pretty = 0)
plot(tree.dt_a)
text(tree.dt_a, pretty = 0)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
summary(rtree.dt_a)
tree.pred = predict(tree.dt_a, dt_a[-train_ind, ], type="class")
with(dt_a[-train_ind,], table(tree.pred, Q41.Sex))
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minbucket=5)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
summary(rtree.dt_a)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minbucket=7)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minbucket=10)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, maxdepth = 1)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, maxdepth = 2)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, maxdepth = 5)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, maxdepth = 10)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minsplit=2)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minsplit=2)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minsplit=100)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, minsplit=50)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.1)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.01)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.001)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.005)
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.005，method = 'class', parms = list(split = "information"))
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.005, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
t_pred = predict(rtree.dt_a,test,type="class")
t = test['class']
test['class']
test
t_pred = predict(rtree.dt_a,test,type="class")
colnames(tst)
colnames(test)
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$class,t_pred)
test$class
t = test['class']
test <- data.frame(test)
t = test['class']
t = test['Q41.Sex']
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$class,t_pred)
confMat <- table(test$Q41.Sex,t_pred)
accuracy = sum(t_pred == t)/length(t)
t_pred
t
sum(t_pred == t)
(t_pred == t
t_pred
t_pred[1]
sum(as.character(t_pred == t))
accuracy = sum((as.character(t_pred)) == t)/length(t)
summary(rtree.dt_a)
accuracy
length(t)
t
accuracy = sum((as.character(t_pred)) == t)/n.row(t)
accuracy = sum((as.character(t_pred)) == t)/nrows(t)
accuracy = sum((as.character(t_pred)) == t)/nrow(t)
accuracy
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
t = test['Q41.Sex']
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$Q41.Sex,t_pred)
accuracy = sum((as.character(t_pred)) == t)/nrow(t)
accuracy
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.003, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
t = test['Q41.Sex']
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$Q41.Sex,t_pred)
accuracy = sum((as.character(t_pred)) == t)/nrow(t)
accuracy
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, cp = 0.001, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
t = test['Q41.Sex']
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$Q41.Sex,t_pred)
accuracy = sum((as.character(t_pred)) == t)/nrow(t)
accuracy
rtree.dt_a = rpart(Q41.Sex ~ ., data=train, method = 'class', parms = list(split = "information"))
# Plot the tree using prp command defined in rpart.plot package
prp(rtree.dt_a)
t = test['Q41.Sex']
t_pred = predict(rtree.dt_a,test,type="class")
confMat <- table(test$Q41.Sex,t_pred)
accuracy = sum((as.character(t_pred)) == t)/nrow(t)
summary(rtree.dt_a)
accuracy
